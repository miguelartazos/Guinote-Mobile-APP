/* global jest */

const React = require('react');

const View = (props) => React.createElement('View', props);
const Text = (props) => React.createElement('Text', props);

const Reanimated = {
  Value: jest.fn(() => ({
    setValue: jest.fn(),
  })),
  event: jest.fn(),
  add: jest.fn(),
  sub: jest.fn(),
  multiply: jest.fn(),
  divide: jest.fn(),
  pow: jest.fn(),
  modulo: jest.fn(),
  sqrt: jest.fn(),
  log: jest.fn(),
  sin: jest.fn(),
  cos: jest.fn(),
  tan: jest.fn(),
  asin: jest.fn(),
  acos: jest.fn(),
  atan: jest.fn(),
  exp: jest.fn(),
  round: jest.fn(),
  floor: jest.fn(),
  ceil: jest.fn(),
  lessThan: jest.fn(),
  eq: jest.fn(),
  greaterThan: jest.fn(),
  lessOrEq: jest.fn(),
  greaterOrEq: jest.fn(),
  neq: jest.fn(),
  and: jest.fn(),
  or: jest.fn(),
  defined: jest.fn(),
  not: jest.fn(),
  set: jest.fn(),
  concat: jest.fn(),
  cond: jest.fn(),
  block: jest.fn(),
  call: jest.fn(),
  debug: jest.fn(),
  onChange: jest.fn(),
  startClock: jest.fn(),
  stopClock: jest.fn(),
  clockRunning: jest.fn(),
  Clock: jest.fn(),
  decay: jest.fn(),
  timing: jest.fn(),
  spring: jest.fn(),
  SpringUtils: {
    makeDefaultConfig: jest.fn(),
    makeConfigFromBouncinessAndSpeed: jest.fn(),
    makeConfigFromOrigamiTensionAndFriction: jest.fn(),
  },
  View,
  Text,
  Image: View,
  ScrollView: View,
  Code: jest.fn(({ exec }) => null),
  createAnimatedComponent: (Component) => Component,
  interpolate: jest.fn(),
  interpolateNode: jest.fn(),
  interpolateColor: jest.fn(),
  interpolateColors: jest.fn(),
  Extrapolate: {
    EXTEND: 'extend',
    CLAMP: 'clamp',
    IDENTITY: 'identity',
  },
  Easing: {
    linear: jest.fn(),
    ease: jest.fn(),
    quad: jest.fn(),
    cubic: jest.fn(),
    poly: jest.fn(),
    sin: jest.fn(),
    circle: jest.fn(),
    exp: jest.fn(),
    elastic: jest.fn(),
    back: jest.fn(),
    bounce: jest.fn(),
    bezier: jest.fn(() => jest.fn()),
    in: jest.fn(),
    out: jest.fn(),
    inOut: jest.fn(),
  },
  useSharedValue: jest.fn((initialValue) => ({ value: initialValue })),
  useAnimatedStyle: jest.fn((updater) => ({})),
  useAnimatedProps: jest.fn((updater) => ({})),
  useAnimatedGestureHandler: jest.fn(() => ({})),
  useAnimatedScrollHandler: jest.fn(() => ({})),
  useAnimatedRef: jest.fn(() => React.createRef()),
  useDerivedValue: jest.fn((updater) => ({ value: 0 })),
  useAnimatedReaction: jest.fn(),
  useAnimatedKeyboard: jest.fn(() => ({ height: { value: 0 }, state: { value: 0 } })),
  withTiming: jest.fn((toValue) => toValue),
  withSpring: jest.fn((toValue) => toValue),
  withDecay: jest.fn((options) => 0),
  withDelay: jest.fn((delay, animation) => animation),
  withSequence: jest.fn((...animations) => 0),
  withRepeat: jest.fn((animation) => animation),
  cancelAnimation: jest.fn(),
  runOnJS: jest.fn((fn) => fn),
  runOnUI: jest.fn((fn) => fn),
  processColor: jest.fn((color) => color),
  makeMutable: jest.fn((initialValue) => ({ value: initialValue })),
  default: {
    Value: jest.fn(() => ({
      setValue: jest.fn(),
    })),
  },
};

module.exports = Reanimated;