#!/bin/bash

# Generate TypeScript types from Supabase database schema
# This script requires the Supabase CLI to be installed

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🔄 Generating Supabase TypeScript types...${NC}"

# Check if .env file exists
if [ ! -f .env ]; then
    echo -e "${RED}❌ Error: .env file not found${NC}"
    echo "Please create a .env file with EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY"
    exit 1
fi

# Extract Supabase URL from .env
SUPABASE_URL=$(grep EXPO_PUBLIC_SUPABASE_URL .env | cut -d '=' -f2 | tr -d '"' | tr -d "'")

if [ -z "$SUPABASE_URL" ]; then
    echo -e "${RED}❌ Error: EXPO_PUBLIC_SUPABASE_URL not found in .env${NC}"
    exit 1
fi

# Extract project ID from URL
PROJECT_ID=$(echo $SUPABASE_URL | sed 's/https:\/\///' | cut -d'.' -f1)

if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}❌ Error: Could not extract project ID from Supabase URL${NC}"
    exit 1
fi

echo -e "📋 Project ID: ${GREEN}$PROJECT_ID${NC}"

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo -e "${YELLOW}📦 Supabase CLI not found. Installing...${NC}"
    npm install -g supabase
fi

# Generate types
echo -e "${YELLOW}🔨 Generating types...${NC}"

# Login to Supabase (you may need to provide access token)
# supabase login

# Generate TypeScript types
npx supabase gen types typescript \
  --project-id "$PROJECT_ID" \
  --schema public \
  > src/types/database.generated.ts

# Check if generation was successful
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Types generated successfully!${NC}"
    echo -e "📄 Output: src/types/database.generated.ts"
    
    # Add header to generated file
    TEMP_FILE=$(mktemp)
    echo "/**" > $TEMP_FILE
    echo " * This file was auto-generated by Supabase CLI." >> $TEMP_FILE
    echo " * Do not edit this file directly." >> $TEMP_FILE
    echo " * Run 'npm run supabase:types' to regenerate." >> $TEMP_FILE
    echo " */" >> $TEMP_FILE
    echo "" >> $TEMP_FILE
    cat src/types/database.generated.ts >> $TEMP_FILE
    mv $TEMP_FILE src/types/database.generated.ts
    
    # Update the main types file to export generated types
    echo -e "${YELLOW}📝 Updating type exports...${NC}"
    
    # Create or update database.types.ts to re-export
    cat > src/types/database.types.ts << 'EOF'
/**
 * Database type definitions
 * This file re-exports the auto-generated types and adds custom type utilities
 */

// Re-export all generated types
export * from './database.generated';

// Import for custom type extensions
import type { Database as GeneratedDatabase } from './database.generated';

// Custom type utilities
export type Tables<T extends keyof GeneratedDatabase['public']['Tables']> = 
  GeneratedDatabase['public']['Tables'][T]['Row'];

export type Insertable<T extends keyof GeneratedDatabase['public']['Tables']> = 
  GeneratedDatabase['public']['Tables'][T]['Insert'];

export type Updatable<T extends keyof GeneratedDatabase['public']['Tables']> = 
  GeneratedDatabase['public']['Tables'][T]['Update'];

// Re-export as Database for backward compatibility
export type Database = GeneratedDatabase;
EOF
    
    echo -e "${GREEN}✅ Type exports updated!${NC}"
else
    echo -e "${RED}❌ Error: Failed to generate types${NC}"
    echo "Please make sure you have:"
    echo "1. Valid Supabase project ID"
    echo "2. Supabase CLI installed and logged in"
    echo "3. Network connection to Supabase"
    exit 1
fi

echo -e "${GREEN}🎉 All done!${NC}"